!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD_LIST	setting.h	23;"	d
CH_IDNTY	setting.h	12;"	d
CLIENTNUM	setting.h	3;"	d
DIRC_CMD	setting.h	38;"	d
DNCURSES_OPAQUE	Makefile	/^	gcc client.c -o client -pthread -lcurses -DNCURSES_INTERNALS -DNCURSES_OPAQUE=0 #-lsocket -lnsl $/;"	m
EXIT_NML	setting.h	36;"	d
EXIT_QCK	setting.h	35;"	d
FILENAME	client.c	2;"	d	file:
FILENAME	server.c	2;"	d	file:
FILE_ROUTE	client.c	3;"	d	file:
FILE_ROUTE	server.c	3;"	d	file:
HELP_MAN	setting.h	37;"	d
HELP_MENU	setting.h	40;"	d
HIDE_ROT	setting.h	15;"	d
HIDE_SLF	setting.h	13;"	d
INI_LIST	setting.h	22;"	d
IP	client.c	/^char IP[25];$/;"	v
KICK_MAN	setting.h	17;"	d
KICK_MBR	setting.h	29;"	d
LOG_DIR	setting.h	5;"	d
OPTION	setting.h	/^const char OPTION[OPTN_NUM][20] = {$/;"	v
OPTN_NUM	setting.h	52;"	d
PORT	client.c	/^int PORT;$/;"	v
PRVT_MSG	setting.h	9;"	d
PUBC_MSG	setting.h	8;"	d
RMV_LIST	setting.h	24;"	d
SAVE_HIS	setting.h	34;"	d
SHOW_FDS	setting.h	32;"	d
SHOW_MBR	setting.h	33;"	d
SHOW_PRT	setting.h	30;"	d
SHOW_PWD	setting.h	31;"	d
SHUTDOWN	setting.h	18;"	d
SU_ST_AC	setting.h	20;"	d
SU_ST_RF	setting.h	21;"	d
SYST_MSG	setting.h	25;"	d
TRYTO_SU	setting.h	11;"	d
U_HD_ROT	setting.h	16;"	d
U_HD_SLF	setting.h	14;"	d
WALL_MSG	setting.h	27;"	d
WRIT_MSG	setting.h	28;"	d
auto_save	server.c	/^void auto_save(void){$/;"	f
bbox	client.c	/^       *bbox , \/* banner box *\/                       $/;"	v
cancel_recv_thread	server.c	/^int cancel_recv_thread(int nth){$/;"	f
ch	client.c	/^int ch;$/;"	v
ch	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
client	server.c	/^} client[CLIENTNUM]={ [0 ... CLIENTNUM-1]={ .fd=-1 , .root=0 } };$/;"	v	typeref:struct:clientinfo
clientfd	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
clientinfo	client.c	/^struct clientinfo {$/;"	s	file:
clientinfo	server.c	/^struct clientinfo {$/;"	s	file:
close_server	server.c	/^void close_server(void){$/;"	f
clt	client.c	/^} clt[CLIENTNUM+1] = {	[1 ... CLIENTNUM] = { .hold = 0 } , [0] = { .hold = 1 , .name = "All"	} };$/;"	v	typeref:struct:clientinfo
clt_fd	client.c	/^int clt_fd;$/;"	v
cmd_id	server.c	/^pthread_t  cmd_id , shutdown_id;$/;"	v
cmd_thread	server.c	/^void cmd_thread(void){	$/;"	f
cnt_host	client.c	/^int cnt_host(void){$/;"	f
combsend	client.c	/^ssize_t combsend(int fd , char *msg , unsigned int msg_t , char *format , ... ){$/;"	f
combsend	server.c	/^ssize_t combsend(int fd , char *msg , unsigned int msg_t , char *format , ... ){$/;"	f
combsys	client.c	/^int combsys(char *cmd , unsigned int cmd_t , char *format , ... ){$/;"	f
combsys	server.c	/^int combsys(char *cmd , unsigned int cmd_t , char *format , ... ){$/;"	f
command	client.c	/^char command[350] , send_str[350];$/;"	v
cur_id	client.c	/^char cur_id[20];$/;"	v
curline	client.c	/^int curline = 0;\/\/for history$/;"	v
curline	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
curname	server.c	/^    char name[20] , curname[20];\/\/curname = [root | self.name]$/;"	m	struct:clientinfo	file:
escape	client.c	/^void escape(int a){$/;"	f
fd	server.c	/^    int root , fd;$/;"	m	struct:clientinfo	file:
fileroute	client.c	/^char fileroute[40];$/;"	v
g_cmd	server.c	/^char g_cmd[350] , history[500][300] , root_pw[60];$/;"	v
g_sd_str	server.c	/^char g_sd_str[307];$/;"	v
history	client.c	/^char history[300][300] = {"\\0"};$/;"	v
history	server.c	/^char g_cmd[350] , history[500][300] , root_pw[60];$/;"	v
hold	client.c	/^    int hold;$/;"	m	struct:clientinfo	file:
ibox	client.c	/^       *ibox , \/* msg input box *\/                  $/;"	v
id	server.c	/^    pthread_t id;\/\/for thread to recv_msg$/;"	m	struct:clientinfo	file:
initial	client.c	/^void initial(void){$/;"	f
kick	server.c	/^void kick(char *man){$/;"	f
main	client.c	/^int main(){$/;"	f
main	server.c	/^int main(void){$/;"	f
mbox	client.c	/^       *mbox , \/* member list box *\/                 $/;"	v
mbox_t	client.c	/^int mbox_t = 0;\/\/the user current mbox top line point$/;"	v
mbr_ls	client.c	/^int mbr_ls[ CLIENTNUM + 1 ] = {[ 0 ] = 0};\/\/point client array (sorted)$/;"	v
member_ctrl	server.c	/^void member_ctrl(char *mod , char *name){$/;"	f
memberctrl	client.c	/^void memberctrl(char *mod , char *name){$/;"	f
membermod	client.c	/^void membermod(char *name){$/;"	f
mvwAttrw	client.c	/^void mvwAttrw(WINDOW *awin , int y , int x , int attrs , char *format , ... ){$/;"	f
mvwWipen	client.c	/^void mvwWipen(WINDOW *awin , int y , int x , int n){$/;"	f
my_id	client.c	/^char my_id[11];$/;"	v
name	client.c	/^    char name[10];$/;"	m	struct:clientinfo	file:
name	server.c	/^    char name[20] , curname[20];\/\/curname = [root | self.name]$/;"	m	struct:clientinfo	file:
new	client.c	/^int new = 1;$/;"	v
obox	client.c	/^       *obox , \/* option box *\/                       $/;"	v
omit_id	client.c	/^char *omit_id(char *str){$/;"	f
omitstr	client.c	/^char omitstr[15];$/;"	v
online	client.c	/^int online = 0;\/\/the num people on line$/;"	v
online	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
pbox	client.c	/^       *pbox ; \/* beside input box to print ps *\/      $/;"	v
ps	client.c	/^char ps = '$';\/\/$(normal) >(just good) #(root)$/;"	v
quick_close_server	server.c	/^void quick_close_server(void){$/;"	f
rbox	client.c	/^       *rbox , \/* root win *\/                      $/;"	v
recv_msg	client.c	/^void recv_msg(void){$/;"	f
recv_msg	server.c	/^void recv_msg(void *num){$/;"	f
recvr_n	client.c	/^char recvr_n[11] = { "All" };$/;"	v
redraw	client.c	/^void redraw(int mod){$/;"	f
root	client.c	/^int root = 0;\/\/ whether you have root competence$/;"	v
root	server.c	/^    int root , fd;$/;"	m	struct:clientinfo	file:
root_pw	server.c	/^char g_cmd[350] , history[500][300] , root_pw[60];$/;"	v
rooting	client.c	/^int rooting = 0;$/;"	v
rootmod	client.c	/^void rootmod(void){$/;"	f
route	client.c	/^struct stat route;$/;"	v	typeref:struct:stat
selectmod	client.c	/^void selectmod(void){$/;"	f
send_cmd_all	server.c	/^void send_cmd_all(char *cmd , unsigned int cmd_size , int except_fd){$/;"	f
send_str	client.c	/^char command[350] , send_str[350];$/;"	v
shutdown_id	server.c	/^pthread_t  cmd_id , shutdown_id;$/;"	v
sockfd	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
storehistory	client.c	/^void storehistory(void){$/;"	f
svr_fd	client.c	/^int svr_fd;$/;"	v
svr_port	server.c	/^int sockfd , clientfd , svr_port , ch , online = 0 , curline=0;$/;"	v
tbox	client.c	/^       *tbox , \/* talk box *\/                       $/;"	v
tbox_c	client.c	/^int tbox_c = 0;\/\/for talk bodx$/;"	v
tbox_t	client.c	/^int tbox_t = 0;\/\/for talk box $/;"	v
terminal	client.c	/^int terminal(WINDOW *twin , char *str , int n){$/;"	f
trim	client.c	/^char *trim(char *str){$/;"	f
trim	server.c	/^char *trim(char *str){$/;"	f
wall	server.c	/^void wall(char *sender , char *str){$/;"	f
wbox	client.c	/^       *wbox , \/* msg to whom displayer *\/           $/;"	v
win	client.c	/^WINDOW *win[7] , $/;"	v
win_c	client.c	/^       *win_c , \/* current win *\/                   $/;"	v
writeto	server.c	/^void writeto(char *sender , char *receiver , char *str){$/;"	f
x	client.c	/^int x , y;$/;"	v
y	client.c	/^int x , y;$/;"	v
